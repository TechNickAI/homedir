# This file contains code that is specific to OSX

# Homebrew path setup
export HOMEBREW_BREWFILE=~/homedir/Brewfile
if [ -f /opt/homebrew/bin/brew ]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
fi

# Add a virtualenv to the path for each directory in ~/src
src_contents=$(find ~/src -mindepth 1 -maxdepth 1 -type d 2>/dev/null)
if [[ -n "$src_contents" ]]; then
    echo "$src_contents" | while read -r env; do
        env_name=$(basename "$env")
        has_venv="$HOME/.virtualenvs/$env_name"
        if [[ -d $has_venv ]]; then
            alias $env_name="cd ~/src/$env_name; source $has_venv/bin/activate"
        fi
    done
fi

#### Aliases
alias ip='dig +short myip.opendns.com @resolver1.opendns.com'
alias localip="ipconfig getifaddr en0"
alias randpick='jot -r 1 1'
alias agp="ag -G '.py'"
alias family_guy="find ~/Dropbox/Watch/Family\ Guy/ -type f -print0 | sort -zR | head -n 1 | xargs -0 vlc -f --play-and-exit"
alias office="find ~/Dropbox/Watch/The\ Office/ -type f -print0 | sort -zR | head -n 1 | xargs -0 vlc -f --play-and-exit"
alias interpreter=$HOME/.virtualenvs/interpreter/bin/interpreter

#### Functions
function commit_link() {
    ## Grab the latest commit from the current repo and open it on github.com

    # hash
    hash=$(git log -n 1 --format="%H")
    if [ $? != 0 ]; then
        echo "Oops! Not a Git repository üö´"
        return
    fi

    # repo owner/name
    repo=$(git remote -v | grep github.com | head -1 | awk -F ':' '{print $2}' | perl -p -e 's/\.git.+//')
    url="https://github.com/$repo/commit/$hash"
    echo "Opening latest commit on GitHub... üîó"
    open $url
}

function wifi_redirect() {
    # Enhanced function to handle WiFi portal redirections
    local test_url="http://down.com/"
    local tmpfile="/tmp/wifi_redirect_headers.txt"
    echo "Checking internet connection... üåê"

    # Use curl with -f to fail on HTTP errors and loop until successful
    while ! curl -f -D "$tmpfile" "$test_url" >/dev/null 2>&1; do
        echo "No internet connection detected, retrying in 1 second... ‚è≥"
        sleep 1
    done

    local location_header=$(grep Location: "$tmpfile")
    local location_url=$(echo "$location_header" | sed 's/Location: //; s/[[:space:]]//g')

    # Check if the redirect URL is the same as the test URL
    if [[ "$location_url" =~ down.com ]]; then
        echo "Internet connection verified ‚úÖ"
        open https://ismyinternetworking.com/
    else
        echo "Redirect found, opening $location_url üîÑ"
        open "$location_url"
    fi
}

### Handle env files

# Function to source an env file and export variables
function load_env_file() {
    local env_file=$1

    if [[ ! -f $env_file ]]; then
        echo "File not found: $env_file"
        return 1
    fi

    # Source the file
    source "$env_file"

    # Export each variable
    while IFS='=' read -r key value; do
        # Skip blank lines and comments
        [[ -z "$key" || "$key" =~ ^# ]] && continue

        # Remove surrounding quotes from the value if present
        value=$(echo "$value" | sed -e 's/^"//' -e 's/"$//')

        # Export the key-value pair
        export "$key=$value"
    done <"$env_file"
}

# List of env file locations (files or directories)
env_locations=(
    "$HOME/dot_env_shared"
    "$HOME/dot_env_local"
    "$HOME/env"
    "$HOME/src/env"
    "$HOME/.env"
)

# Loop through each location
for location in "${env_locations[@]}"; do
    if [[ -d $location ]]; then
        # If it's a directory, read all files in the directory
        for env_file in "$location"/*; do
            if [[ -f $env_file ]]; then
                load_env_file "$env_file"
            fi
        done
    elif [[ -f $location ]]; then
        # If it's a file, read the file
        load_env_file "$location"
    fi

done

# New function to show environment variables loaded from each env file
function show_env_vars() {
    for location in "${env_locations[@]}"; do
        if [[ -d $location ]]; then
            for env_file in "$location"/*; do
                if [[ -f $env_file ]]; then
                    echo "\nVariables from $env_file:"
                    grep -v '^#' "$env_file" | while IFS='=' read -r key value; do
                        [[ -z "$key" ]] && continue
                        echo "$key=$(printenv $key)"
                    done
                fi
            done
        elif [[ -f $location ]]; then
            echo "\nVariables from $location:"
            grep -v '^#' "$location" | while IFS='=' read -r key value; do
                [[ -z "$key" ]] && continue
                echo "$key=$(printenv $key)"
            done
        fi
    done
}
